/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Welcome from '../model/Welcome';

/**
* Welcome service.
* @module api/WelcomeApi
* @version 1.0.0
*/
export default class WelcomeApi {

    /**
    * Constructs a new WelcomeApi. 
    * @alias module:api/WelcomeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createwelcome operation.
     * @callback module:api/WelcomeApi~createwelcomeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Welcome} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Welcome} welcome data to be created
     * @param {module:api/WelcomeApi~createwelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Welcome}
     */
    createwelcome(welcome, callback) {
      let postBody = welcome;
      // verify the required parameter 'welcome' is set
      if (welcome === undefined || welcome === null) {
        throw new Error("Missing the required parameter 'welcome' when calling createwelcome");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Welcome;
      return this.apiClient.callApi(
        '/welcome', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletewelcome operation.
     * @callback module:api/WelcomeApi~deletewelcomeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} welcomeId the Id parameter
     * @param {module:api/WelcomeApi~deletewelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletewelcome(welcomeId, callback) {
      let postBody = null;
      // verify the required parameter 'welcomeId' is set
      if (welcomeId === undefined || welcomeId === null) {
        throw new Error("Missing the required parameter 'welcomeId' when calling deletewelcome");
      }

      let pathParams = {
        'welcomeId': welcomeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/welcome/{welcomeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllwelcome operation.
     * @callback module:api/WelcomeApi~getAllwelcomeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Welcome>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/WelcomeApi~getAllwelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Welcome>}
     */
    getAllwelcome(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Welcome];
      return this.apiClient.callApi(
        '/welcome/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamswelcome operation.
     * @callback module:api/WelcomeApi~getByParamswelcomeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Welcome>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/WelcomeApi~getByParamswelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Welcome>}
     */
    getByParamswelcome(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamswelcome");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Welcome];
      return this.apiClient.callApi(
        '/welcome/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getwelcome operation.
     * @callback module:api/WelcomeApi~getwelcomeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Welcome} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} welcomeId the Id parameter
     * @param {module:api/WelcomeApi~getwelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Welcome}
     */
    getwelcome(welcomeId, callback) {
      let postBody = null;
      // verify the required parameter 'welcomeId' is set
      if (welcomeId === undefined || welcomeId === null) {
        throw new Error("Missing the required parameter 'welcomeId' when calling getwelcome");
      }

      let pathParams = {
        'welcomeId': welcomeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Welcome;
      return this.apiClient.callApi(
        '/welcome/{welcomeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatewelcome operation.
     * @callback module:api/WelcomeApi~updatewelcomeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Welcome} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} welcomeId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Welcome} opts.welcome data to be updated
     * @param {module:api/WelcomeApi~updatewelcomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Welcome}
     */
    updatewelcome(welcomeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['welcome'];
      // verify the required parameter 'welcomeId' is set
      if (welcomeId === undefined || welcomeId === null) {
        throw new Error("Missing the required parameter 'welcomeId' when calling updatewelcome");
      }

      let pathParams = {
        'welcomeId': welcomeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Welcome;
      return this.apiClient.callApi(
        '/welcome/{welcomeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
